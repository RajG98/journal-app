pipeline {
    agent any // Make sure this matches your Linux node label

    environment {
        TARGET_DIR_FOR_DEV='C:\\apache-tomcat-11.0.8-windows-x64\\Tomcat11-DEV'
        TARGET_DIR_FOR_QA='/opt/tomcat/Tomcat11-QA'
        WAR_NAME='journal.war'
        JWT_SECRET_KEY = credentials('jwt-secret-key-1')
        POSTGRES_CREDENTIALS = credentials('postgres')
        SONAR_HOST_URL='http://sonarqube:9000'
    }

    parameters {
        string(name: 'GIT_CREDENTIALS_ID', defaultValue: 'github-token', description: 'Jenkins GitHub credentials ID')
    }

    stages {
        stage('Clone') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: "${params.GIT_CREDENTIALS_ID}",
                        url: 'https://github.com/RajG98/journal-app.git'
                    ]]
                )
            }
        }

        stage('Test') {
            steps {
                dir('backend') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean test'
                }
            }
            post {
                always {
                    dir('backend') {
                        junit '**/target/surefire-reports/TEST-*.xml'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('backend') {
                    sh './mvnw package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sq1') {
                    dir('backend') {
                        sh './mvnw sonar:sonar'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // stage('Stop Tomcat') {
        //     steps {
        //         catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
        //             sh 'sudo systemctl stop tomcat11-dev || true'
        //             sh 'sleep 10'
        //         }
        //     }
        // }

        // stage('Copy to DEV') {
        //     steps {
        //         dir('backend') {
        //             sh "cp target/${WAR_NAME} ${TARGET_DIR_FOR_DEV}/webapps/"
        //         }
        //     }
        // }

        // stage('Prepare Tomcat Env') {
        //     steps {
        //         script {
        //             def setenvContent = """
        //             export JWT_SECRET_KEY=${JWT_SECRET_KEY}
        //             export JAVA_OPTS="\$JAVA_OPTS -DJWT_SECRET_KEY=\$JWT_SECRET_KEY"
        //             """

        //             writeFile file: "${TARGET_DIR_FOR_DEV}/bin/setenv.sh", text: setenvContent
        //             sh "chmod +x ${TARGET_DIR_FOR_DEV}/bin/setenv.sh"
        //             echo "✅ Generated setenv.sh"
        //         }
        //     }
        // }

        // stage('Start Tomcat') {
        //     steps {
        //         sh 'sudo systemctl start tomcat11-dev'
        //     }
        // }

        stage('Approve for QA') {
            steps {
                script {
                    input message: 'Approve build to QA? (Start Docker engine before proceeding)'
                }
            }
        }

        stage('Deploy to QA on Docker') {
            steps {
                withCredentials([
                    string(credentialsId: 'jwt-secret-key-1', variable: 'JWT_SECRET_KEY'),
                    usernamePassword(credentialsId: 'postgres', usernameVariable: 'POSTGRES_CREDENTIALS_USR', passwordVariable: 'POSTGRES_CREDENTIALS_PSW')
                ]) {
                    sh '''
                        export JWT_SECRET_KEY=$JWT_SECRET_KEY
                        export POSTGRES_URL=jdbc:postgresql://localhost:5432/db
                        export POSTGRES_USERNAME=$POSTGRES_CREDENTIALS_USR
                        export POSTGRES_PASSWORD=$POSTGRES_CREDENTIALS_PSW
                        docker-compose -f docker-compose.yml up -d --build
                    '''
                }
            }
        }

        stage('Wait and Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh 'sleep 10'
                    sh 'curl -f http://localhost:8083 || echo "App did not start properly"'
                }
            }
        }

        // Uncomment if needed
        // stage('Docker Compose Down') {
        //     steps {
        //         sh 'docker-compose down'
        //     }
        // }
    }

    post {
        success {
            echo '✅ Pipeline successfully completed'
        }
        failure {
            echo '❌ Pipeline failed'
        }
    }
}
