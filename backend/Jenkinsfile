pipeline {
    agent any
    
    environment{
        TARGET_DIR_FOR_DEV='C:\\apache-tomcat-11.0.8-windows-x64\\Tomcat11-DEV'
        TARGET_DIR_FOR_QA='C:\\apache-tomcat-11.0.8-windows-x64\\Tomcat11-QA\\webapps'
        WAR_NAME='journal.war'
        JWT_SECRET_KEY=credentials('jwt-secret-key-1')
        POSTGRES_CREDENTIALS=credentials('postgres')
        POSTGRES_USERNAME="${POSTGRES_CREDENTIALS_USR}"
        POSTGRES_PASSWORD="${POSTGRES_CREDENTIALS_PSW}"

    }
    parameters {
        string(name: 'GIT_CREDENTIALS_ID', defaultValue: 'github-token', description: 'Jenkins GitHub credentials ID')
    }

    stages {
        stage('Clone'){
            steps{
                checkout scmGit(
                    branches: [[name: '*/main']], // or your desired branch, e.g., '*/master'
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: "${params.GIT_CREDENTIALS_ID}", // ID of your Jenkins credentials
                        url: 'https://github.com/RajG98/journal-app.git' // Replace with your repository URL
                    ]]
                )
                
            }
        }
        stage('Test') {
            steps {
                dir('backend'){
                    bat "mvn clean test -Dsecurity.jwt.secret-key=%JWT_SECRET_KEY%"
                }
            }
            post{
                always{
                    dir('backend'){
                        junit '**/target/surefire-reports/TEST-*.xml'
                    }
                }
            }
        }
        stage('Build') {
            steps {
                dir('backend'){
                    bat "mvn package -DskipTests -Dsecurity.jwt.secret-key=%JWT_SECRET_KEY%"
                }
            }
        }
        stage('SonarQube Analysis'){
            steps{
                withSonarQubeEnv(installationName: 'sq1') {
                    dir('backend'){
                        bat 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage('Quality Gate'){
            steps{
                timeout(time:2,unit:'MINUTES'){
                    waitForQualityGate abortPipeline:true
                }
            }
        }
        stage('Stop Tomcat'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE'){ 
                    bat "sc stop Tomcat11-DEV"
                    bat 'timeout /t 10 /nobreak >nul'
                }
            }
        }
        stage('Copy to DEV') {
            steps {
                dir('backend'){
                    bat "xcopy /Y target\\${WAR_NAME} ${TARGET_DIR_FOR_DEV}\\webapps"
                }
            }
        }
        stage('Prepare Tomcat Env') {
            steps {
               
bat """
(
echo set JAVA_OPTS=-Dspring.profiles.active=qa ^
 -Dsecurity.jwt.secret-key=%JWT_SECRET_KEY% ^
 -DPOSTGRES_USERNAME=postgres ^
 -DPOSTGRES_PASSWORD=toor 
) > "%TARGET_DIR_FOR_DEV%\\bin\\setenv.bat"
"""


            }
        }

        stage('Start Tomcat') {
            steps {
                
                bat "sc start Tomcat11-DEV"
            }
        }
        stage('Approve for QA'){
            steps{
                script{
                    input message:'Approve build to QA?-(Start Docker Desktop before proceeding)'
                }
            }
        }

        stage('Deploy to QA on Docker'){
            steps{
                bat "docker-compose up -d --build"
            }
        }
        stage('Wait and Test') {
        steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE'){ 
            bat 'timeout /t 10 /nobreak >nul'
            bat 'curl -f http://localhost:8080 || echo "App did not start properly"'
            }
        }
    }
    
//     stage('Docker Compose Down') {
//       steps {
//         script {
//           bat 'docker-compose down'
//         }
//       }
//     }
    }
    post{
        success {
            echo 'Pipeline successfully completed'
        }
        failure{
            echo 'Pipeline failed'
        }
    }
}